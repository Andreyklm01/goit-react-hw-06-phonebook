{"version":3,"sources":["redux/actions.js","components/ContactForm/ContactForm.jsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.jsx","App.jsx","redux/reducer.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css","components/ContactsList/ContactsList.module.css","components/Filter/Filter.module.css"],"names":["addName","createAction","name","number","payload","id","uuidv4","deleteName","filterByName","ContactForm","state","inputNameId","inputNumberId","handleChange","target","value","setState","handleSubmit","event","preventDefault","props","contacts","find","contact","toLowerCase","alert","toUpperCase","onSubmit","resetInput","this","className","s","formContainer","form","title","htmlFor","input","type","pattern","required","onChange","button","Component","connect","items","dispatch","getVisibleContacts","allContacts","filter","normalizedFilter","includes","onDelete","list","map","item","onClick","filterId","container","text","App","createReducer","_","combineReducers","persistConfig","key","storage","persistedReducer","persistReducer","contactsReducer","store","configureStore","reducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.8fca196b.chunk.js","sourcesContent":["import { v4 as uuidv4 } from 'uuid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addName = createAction('contacts/ADD_CONTACT', (name, number) => ({\r\n  payload: {\r\n    id: uuidv4(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\nconst deleteName = createAction('contacts/DELETE_CONTACT');\r\n\r\nconst filterByName = createAction('contacts/FILTER_CONTACTS');\r\n\r\nexport { addName, deleteName, filterByName };\r\n\r\n// const addName = (name, number) => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: uuidv4(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n\r\n// const deleteName = contactId => ({\r\n//   type: types.DELETE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// const filterByName = name => ({\r\n//   type: types.FILTER,\r\n//   payload: name,\r\n// });\r\n","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addName } from '../../redux/actions';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactForm.module.css';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n  inputNameId = uuidv4();\r\n  inputNumberId = uuidv4();\r\n\r\n  handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const { name, number } = this.state;\r\n    const findMatches = this.props.contacts.find(\r\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n    );\r\n\r\n    findMatches\r\n      ? alert(`${name.toUpperCase()} is allready in contacts`)\r\n      : this.props.onSubmit(name, number);\r\n\r\n    this.resetInput();\r\n  };\r\n\r\n  resetInput = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <div className={s.formContainer}>\r\n        <form className={s.form} onSubmit={this.handleSubmit}>\r\n          <h3 className={s.title}>Name</h3>\r\n          <label htmlFor={this.inputNameId}>\r\n            <input\r\n              className={s.input}\r\n              id={this.inputNameId}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={name}\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <h3 className={s.title}>Number</h3>\r\n          <label htmlFor={this.inputNumberId}>\r\n            <input\r\n              className={s.input}\r\n              id={this.inputNumberId}\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={number}\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <button className={s.button} type=\"submit\">\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func,\r\n};\r\nconst mapStateToProps = state => ({\r\n  contacts: state.items,\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onSubmit: (value, number) => dispatch(addName(value, number)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { deleteName } from '../../redux/actions';\r\nimport s from './ContactsList.module.css';\r\n\r\nconst ContactsList = ({ contacts, onDelete }) => (\r\n  <ul className={s.list}>\r\n    {contacts.map(({ id, name, number }) => (\r\n      <li className={s.item} key={id}>\r\n        {name}: {number}\r\n        <button className={s.button} type=\"button\" onClick={() => onDelete(id)}>\r\n          Delete\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.array,\r\n  onDelete: PropTypes.func,\r\n};\r\n\r\nconst getVisibleContacts = (allContacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n  return allContacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: getVisibleContacts(state.items, state.filter),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onDelete: id => dispatch(deleteName(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\r\n","import PropTypes from 'prop-types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { connect } from 'react-redux';\r\nimport { filterByName } from '../../redux/actions';\r\nimport s from './Filter.module.css';\r\n\r\nconst filterId = uuidv4();\r\n\r\nconst Filter = ({ name, onChange }) => (\r\n  <div className={s.container}>\r\n    <p className={s.text}>Find Contacts by name:</p>\r\n    <label htmlFor={filterId}>\r\n      <input\r\n        className={s.input}\r\n        id={filterId}\r\n        type=\"text\"\r\n        value={name}\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  </div>\r\n);\r\n\r\nFilter.propTypes = {\r\n  name: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  name: state.filter,\r\n});\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: event => dispatch(filterByName(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import ContactForm from './components/ContactForm/ContactForm';\nimport ContactsList from './components/ContactsList/ContactsList';\nimport Filter from './components/Filter/Filter';\n\nconst App = () => (\n  <>\n    <h1 className=\"main-title\">Phonebook</h1>\n    <ContactForm />\n    <div>\n      <h2 className=\"subtitle\">Contacts</h2>\n      <Filter />\n      <ContactsList />\n    </div>\n  </>\n);\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport { addName, deleteName, filterByName } from './actions';\r\n\r\nconst items = createReducer([], {\r\n  [addName]: (state, { payload }) => [...state, payload],\r\n  [deleteName]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [filterByName]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n\r\n//     case types.DELETE:\r\n//       return state.filter(contact => contact.id !== payload);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.FILTER:\r\n//       return payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from './reducer';\r\n\r\n// const store = createStore(\r\n//   contactsReducer,\r\n//   composeWithDevTools(applyMiddleware()),\r\n// );\r\nconst persistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, contactsReducer);\r\n\r\nconst store = configureStore({\r\n  reducer: persistedReducer,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\nimport { store, persistor } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formContainer\":\"ContactForm_formContainer__rkIFO\",\"form\":\"ContactForm_form__3e48q\",\"input\":\"ContactForm_input__TJ-jW\",\"title\":\"ContactForm_title__2mz1R\",\"button\":\"ContactForm_button__1ID5X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactsList_list__3Qx20\",\"item\":\"ContactsList_item__2tQjE\",\"button\":\"ContactsList_button__2PRuz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__89FiF\",\"text\":\"Filter_text__1Jj_Y\",\"input\":\"Filter_input__3LlX4\"};"],"sourceRoot":""}